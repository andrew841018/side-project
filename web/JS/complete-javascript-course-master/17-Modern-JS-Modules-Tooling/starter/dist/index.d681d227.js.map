{"mappings":"AAAA;;;;EAIE,CACF,kBAAkB;AAClB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAkCE,CACF,MAAM,SAAS,GAAG,MAAM,YAAY,EAAE,AAAC;AACvC,6DAA6D;AAC7D,qDAAqD;AACrD,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;AACvB,SAAS;AACT,MAAM,aAAa,GAAG,AAAC,WAAY;IACjC,MAAM,IAAI,GAAG,EAAE,AAAC;IAChB,MAAM,YAAY,GAAG,EAAE,AAAC;IACxB,MAAM,UAAU,GAAG,IAAI,AAAC;IACxB,MAAM,aAAa,GAAG,EAAE,AAAC;IACzB,MAAM,SAAS,GAAG,SAAU,OAAO,EAAE,QAAQ,EAAE;QAC7C,IAAI,CAAC,IAAI,CAAC;YAAE,OAAO;YAAE,QAAQ;SAAE,CAAC,CAAC;QACjC,OAAO,CAAC,GAAG,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC;KACvD,AAAC;IACF,OAAO;QACL,SAAS;QACT,IAAI;QACJ,UAAU;QACV,aAAa;KACd,CAAC;CACH,EAAG,AAAC;AACL,kCAAkC;AAClC,+CAA+C;AAC/C,qEAAqE;AACrE,aAAa,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;AACpC,wCAAwC;AACxC,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC,CAEtC,yCAAyC","sources":["starter/script.js"],"sourcesContent":["/* when we using module,'use strict' always by default\nusing module means,in html we write this:\n<script type=\"module\"></script>\nthen we using module\n*/\n//importing module\n/*\nimport { total as T, tq, addToCart } from './shoppingChart.js';\nconsole.log('import');\nconsole.log(tq);\nconsole.log(T);\naddToCart('airplane'.charAt(0).toUpperCase() + 'airplane'.slice(1), 100000);\nimport * as shopping from './shoppingChart.js'; //* means everything\nconsole.log(shopping.total, shopping.tq);\n\n//dirty is new name for import function so no need to {}\n//the previous like total,addToChart has been decleared so can use {}\nimport dirty, { cart } from './shoppingChart.js'; //import default function\ndirty('holy shit', ' god damn');\n//when we call addToCart,it will modify cart,雖然cart不是在這個js所定義的\n//但仍舊會被更改到，因為在另一個js中，cart有被export,而在這個js中，cart有被import\n//因此，可以在這個js直接更改另一個js的cart\naddToCart('car', 1000);\naddToCart('pig', 30);\nconsole.log(cart);\nconst getLasrtPost = async function () {\n  //in module we don't need to put await inside the async\n  const res = await fetch(`https://jsonplaceholder.typicode.com/posts`);\n  const data = await res.json();\n  //the following code do this:\n  //title=data.at(-1).title and return\n  //text=data.at(-1).body and return\n  return { title: data.at(-1).title, text: data.at(-1).body };\n};\nlet lastPost = getLasrtPost();\nconsole.log(lastPost); //it is not object but Promise\n/*\nasync function會在背景作業，由於抓資料的部分都是以await定義，因此一定會等到有資料才會回傳\n但lastPost在要資料的時候，getLastPost()還沒有產生出資料，這時候lastPost就會拿到一個\npadding Promise(因為getLastPost()是async function)。\n*/\nconst lastPost2 = await getLasrtPost();\n//此時由於lastPost2所抓取的是await function,因此會等到任務都做完才asign給lastPost2\n//所以下面lastPost2會拿到完整的資料，由於是await所以類型是object,而非Promise\nconsole.log(lastPost2);\n//closure\nconst ShoppingCart2 = (function () {\n  const cart = [];\n  const shoppingCost = 10;\n  const totalPrice = 2350;\n  const totalQuantity = 12;\n  const addToCart = function (product, quantity) {\n    cart.push({ product, quantity });\n    console.log(`${product} ${quantity} ${shoppingCost}`);\n  };\n  return {\n    addToCart,\n    cart,\n    totalPrice,\n    totalQuantity,\n  };\n})();\n//call function inside the closure\n//evne if ShoppingCart2 not return shoppingCost\n//but when we call addToCart console.log still can print shoppingCost\nShoppingCart2.addToCart('apple', 4);\n//only can call return value or function\nconsole.log(ShoppingCart2.totalPrice);\n\n//import cloneDeep from './cloneDeep.js';\n"],"names":[],"version":3,"file":"index.d681d227.js.map","sourceRoot":"/__parcel_source_root/"}