{"version":3,"sources":["src/js/controller.js"],"names":["icons","URL","import","meta","url","href","replace","icon","recipeContainer","document","querySelector","timeout","s","Promise","_","reject","setTimeout","Error","renderSpinner","parentEl","markup","innerHTML","insertAdjacentHTML","showRecipe","fetch","res","json","data","ok","message","status","console","log","recipe","id","title","publisher","sourceUrl","image","image_url","servings","cookingTime","cooking_time","ingredients","cookingtime","map","ing","quantity","unit","description","join","alert"],"mappings":"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","file":"controller.e87f5190.js","sourceRoot":"..","sourcesContent":["/* \njs在使用圖片時，由於parcel的關係，會根據原圖自動生成另一個圖檔提供js使用\n,而非原本我們提供的，這裡就是去抓取實際使用圖檔的路徑\n*/\n//special solution by Angelica(not jonas version)\n//combine of jonas version\n//anyway the format should be \"http://localhost:XXXX(fill yours)/icons.XXXX(fill yours).svg\"\nimport icon from '../img/icons.svg';\nlet icons = new URL('../img/icons.svg', import.meta.url);\nicons = icons.href.replace('/img/icons.svg', icon);\n\nconst recipeContainer = document.querySelector('.recipe');\nconst timeout = function (s) {\n  return new Promise(function (_, reject) {\n    setTimeout(function () {\n      reject(new Error(`Request took too long! Timeout after ${s} second`));\n    }, s * 1000);\n  });\n};\n\n// https://forkify-api.herokuapp.com/v2\n\n///////////////////////////////////////\n\nconst renderSpinner = function (parentEl) {\n  const markup = `\n  <div class=\"spinner\">\n    <svg>\n      <use href=\"${icons}#icon-loader\"></use>\n    </svg>\n  </div>`;\n  parentEl.innerHTML = '';\n  parentEl.insertAdjacentHTML('afterbegin', markup);\n};\nconst showRecipe = async function () {\n  try {\n    renderSpinner(recipeContainer);\n    //(1)loading recipe\n    const res = await fetch(\n      'https://forkify-api.herokuapp.com/api/v2/recipes/5ed6604591c37cdc054bc886'\n    );\n    const data = await res.json();\n    if (!res.ok) {\n      //data.message->error message\n      //res.status->error code number\n      throw new Error(`${data.message}  ${res.status}`);\n    }\n    console.log(data);\n    //destruct data.data object,get recipt property direct assign to recipt\n    let { recipe } = data.data;\n    //change object property name(ex:image_url->image...)\n    recipe = {\n      id: recipe.id,\n      title: recipe.title,\n      publisher: recipe.publisher,\n      sourceUrl: recipe.sourceUrl,\n      image: recipe.image_url,\n      servings: recipe.servings,\n      cookingTime: recipe.cooking_time,\n      ingredients: recipe.ingredients,\n    };\n    //(2) Rendering recipe\n    const markup = `\n    <figure class=\"recipe__fig\">\n      <img src=${recipe.image} alt=${recipe.title} class=\"recipe__img\" />\n      <h1 class=\"recipe__title\">\n        <span>Pasta with tomato cream sauce</span>\n      </h1>\n    </figure>\n\n    <div class=\"recipe__details\">\n      <div class=\"recipe__info\">\n        <svg class=\"recipe__info-icon\">\n          <use href=${icons}#icon-clock\"></use>\n        </svg>\n        <span class=\"recipe__info-data recipe__info-data--minutes\">${\n          recipe.cookingtime\n        }</span>\n        <span class=\"recipe__info-text\">minutes</span>\n      </div>\n      <div class=\"recipe__info\">\n        <svg class=\"recipe__info-icon\">\n          <use href=${icons}#icon-users\"></use>\n        </svg>\n        <span class=\"recipe__info-data recipe__info-data--people\">4</span>\n        <span class=\"recipe__info-text\">servings</span>\n\n        <div class=\"recipe__info-buttons\">\n          <button class=\"btn--tiny btn--increase-servings\">\n            <svg>\n              <use href=${icons}#icon-minus-circle\"></use>\n            </svg>\n          </button>\n          <button class=\"btn--tiny btn--increase-servings\">\n            <svg>\n              <use href=${icons}#icon-plus-circle\"></use>\n            </svg>\n          </button>\n        </div>\n      </div>\n\n      <div class=\"recipe__user-generated\">\n        <svg>\n          <use href=${icons}#icon-user\"></use>\n        </svg>\n      </div>\n      <button class=\"btn--round\">\n        <svg class=\"\">\n          <use href=${icons}#icon-bookmark-fill\"></use>\n        </svg>\n      </button>\n    </div>\n\n    <div class=\"recipe__ingredients\">\n      <h2 class=\"heading--2\">Recipe ingredients</h2>\n      <ul class=\"recipe__ingredient-list\">${recipe.ingredients\n        .map(ing => {\n          return ` <li class=\"recipe__ingredient\">\n        <svg class=\"recipe__icon\">\n          <use href=${icons}#icon-check\"></use>\n        </svg>\n        <div class=\"recipe__quantity\">${ing.quantity}</div>\n        <div class=\"recipe__description\">\n          <span class=\"recipe__unit\">${ing.unit}</span>\n         ${ing.description}\n        </div>\n      </li>`;\n        })\n        .join('')}\n    </div>\n\n    <div class=\"recipe__directions\">\n      <h2 class=\"heading--2\">How to cook it</h2>\n      <p class=\"recipe__directions-text\">\n        This recipe was carefully designed and tested by\n        <span class=\"recipe__publisher\">${\n          recipe.publisher\n        }</span>. Please check out\n        directions at their website.\n      </p>\n      <a\n        class=\"btn--small recipe__btn\"\n        href=${recipe.sourceUrl}\n        target=\"_blank\"\n      >\n        <span>Directions</span>\n        <svg class=\"search__icon\">\n          <use href=${icons}#icon-arrow-right\"></use>\n        </svg>\n      </a>\n    </div>`;\n    //inner HTML will overwrite previous content\n    recipeContainer.innerHTML = '';\n    recipeContainer.insertAdjacentHTML('afterbegin', markup);\n  } catch (err) {\n    alert(err);\n  }\n};\nshowRecipe();\nrenderSpinner(recipeContainer);\n"]}